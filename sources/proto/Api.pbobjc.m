// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Api.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ITMApiRoot

@implementation ITMApiRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ITMApiRoot_FileDescriptor

static GPBFileDescriptor *ITMApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"iterm2"
                                                 objcPrefix:@"ITM"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum ITMNotificationType

GPBEnumDescriptor *ITMNotificationType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "NotifyOnKeystroke\000NotifyOnScreenUpdate\000N"
        "otifyOnPrompt\000NotifyOnLocationChange\000";
    static const int32_t values[] = {
        ITMNotificationType_NotifyOnKeystroke,
        ITMNotificationType_NotifyOnScreenUpdate,
        ITMNotificationType_NotifyOnPrompt,
        ITMNotificationType_NotifyOnLocationChange,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMNotificationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMNotificationType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMNotificationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMNotificationType_NotifyOnKeystroke:
    case ITMNotificationType_NotifyOnScreenUpdate:
    case ITMNotificationType_NotifyOnPrompt:
    case ITMNotificationType_NotifyOnLocationChange:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMRequest

@implementation ITMRequest

@dynamic hasId_p, id_p;
@dynamic hasGetBufferRequest, getBufferRequest;
@dynamic hasGetPromptRequest, getPromptRequest;
@dynamic hasTransactionRequest, transactionRequest;
@dynamic hasNotificationRequest, notificationRequest;
@dynamic hasRegisterToolRequest, registerToolRequest;
@dynamic hasSetProfilePropertyRequest, setProfilePropertyRequest;
@dynamic hasListSessionsRequest, listSessionsRequest;
@dynamic hasSendTextRequest, sendTextRequest;

typedef struct ITMRequest__storage_ {
  uint32_t _has_storage_[1];
  ITMGetBufferRequest *getBufferRequest;
  ITMGetPromptRequest *getPromptRequest;
  ITMTransactionRequest *transactionRequest;
  ITMNotificationRequest *notificationRequest;
  ITMRegisterToolRequest *registerToolRequest;
  ITMSetProfilePropertyRequest *setProfilePropertyRequest;
  ITMListSessionsRequest *listSessionsRequest;
  ITMSendTextRequest *sendTextRequest;
  int64_t id_p;
} ITMRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ITMRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "getBufferRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMGetBufferRequest),
        .number = ITMRequest_FieldNumber_GetBufferRequest,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, getBufferRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getPromptRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMGetPromptRequest),
        .number = ITMRequest_FieldNumber_GetPromptRequest,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, getPromptRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMTransactionRequest),
        .number = ITMRequest_FieldNumber_TransactionRequest,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, transactionRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notificationRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMNotificationRequest),
        .number = ITMRequest_FieldNumber_NotificationRequest,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, notificationRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "registerToolRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMRegisterToolRequest),
        .number = ITMRequest_FieldNumber_RegisterToolRequest,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, registerToolRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "setProfilePropertyRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMSetProfilePropertyRequest),
        .number = ITMRequest_FieldNumber_SetProfilePropertyRequest,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, setProfilePropertyRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listSessionsRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMListSessionsRequest),
        .number = ITMRequest_FieldNumber_ListSessionsRequest,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, listSessionsRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendTextRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMSendTextRequest),
        .number = ITMRequest_FieldNumber_SendTextRequest,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ITMRequest__storage_, sendTextRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMResponse

@implementation ITMResponse

@dynamic hasId_p, id_p;
@dynamic hasGetBufferResponse, getBufferResponse;
@dynamic hasGetPromptResponse, getPromptResponse;
@dynamic hasTransactionResponse, transactionResponse;
@dynamic hasNotificationResponse, notificationResponse;
@dynamic hasRegisterToolResponse, registerToolResponse;
@dynamic hasSetProfilePropertyResponse, setProfilePropertyResponse;
@dynamic hasListSessionsResponse, listSessionsResponse;
@dynamic hasSendTextResponse, sendTextResponse;
@dynamic hasNotification, notification;

typedef struct ITMResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMGetBufferResponse *getBufferResponse;
  ITMGetPromptResponse *getPromptResponse;
  ITMTransactionResponse *transactionResponse;
  ITMNotificationResponse *notificationResponse;
  ITMRegisterToolResponse *registerToolResponse;
  ITMSetProfilePropertyResponse *setProfilePropertyResponse;
  ITMListSessionsResponse *listSessionsResponse;
  ITMSendTextResponse *sendTextResponse;
  ITMNotification *notification;
  int64_t id_p;
} ITMResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ITMResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "getBufferResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMGetBufferResponse),
        .number = ITMResponse_FieldNumber_GetBufferResponse,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, getBufferResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getPromptResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMGetPromptResponse),
        .number = ITMResponse_FieldNumber_GetPromptResponse,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, getPromptResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMTransactionResponse),
        .number = ITMResponse_FieldNumber_TransactionResponse,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, transactionResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notificationResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMNotificationResponse),
        .number = ITMResponse_FieldNumber_NotificationResponse,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, notificationResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "registerToolResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMRegisterToolResponse),
        .number = ITMResponse_FieldNumber_RegisterToolResponse,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, registerToolResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "setProfilePropertyResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMSetProfilePropertyResponse),
        .number = ITMResponse_FieldNumber_SetProfilePropertyResponse,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, setProfilePropertyResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listSessionsResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMListSessionsResponse),
        .number = ITMResponse_FieldNumber_ListSessionsResponse,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, listSessionsResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendTextResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMSendTextResponse),
        .number = ITMResponse_FieldNumber_SendTextResponse,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, sendTextResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notification",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMNotification),
        .number = ITMResponse_FieldNumber_Notification,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ITMResponse__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMRegisterToolRequest

@implementation ITMRegisterToolRequest

@dynamic hasName, name;
@dynamic hasIdentifier, identifier;
@dynamic hasRevealIfAlreadyRegistered, revealIfAlreadyRegistered;
@dynamic hasToolType, toolType;
@dynamic hasURL, URL;

typedef struct ITMRegisterToolRequest__storage_ {
  uint32_t _has_storage_[1];
  ITMRegisterToolRequest_ToolType toolType;
  NSString *name;
  NSString *identifier;
  NSString *URL;
} ITMRegisterToolRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "name",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMRegisterToolRequest_FieldNumber_Name,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ITMRegisterToolRequest__storage_, name),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "identifier",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMRegisterToolRequest_FieldNumber_Identifier,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(ITMRegisterToolRequest__storage_, identifier),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = ITMRegisterToolRequest_ToolType_WebViewTool,
        .core.name = "toolType",
        .core.dataTypeSpecific.enumDescFunc = ITMRegisterToolRequest_ToolType_EnumDescriptor,
        .core.number = ITMRegisterToolRequest_FieldNumber_ToolType,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(ITMRegisterToolRequest__storage_, toolType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "URL",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMRegisterToolRequest_FieldNumber_URL,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(ITMRegisterToolRequest__storage_, URL),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "revealIfAlreadyRegistered",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMRegisterToolRequest_FieldNumber_RevealIfAlreadyRegistered,
        .core.hasIndex = 2,
        .core.offset = 3,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMRegisterToolRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ITMRegisterToolRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMRegisterToolRequest_ToolType

GPBEnumDescriptor *ITMRegisterToolRequest_ToolType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "WebViewTool\000";
    static const int32_t values[] = {
        ITMRegisterToolRequest_ToolType_WebViewTool,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMRegisterToolRequest_ToolType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMRegisterToolRequest_ToolType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMRegisterToolRequest_ToolType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMRegisterToolRequest_ToolType_WebViewTool:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMRegisterToolResponse

@implementation ITMRegisterToolResponse

@dynamic hasStatus, status;

typedef struct ITMRegisterToolResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMRegisterToolResponse_Status status;
} ITMRegisterToolResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ITMRegisterToolResponse_Status_EnumDescriptor,
        .number = ITMRegisterToolResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMRegisterToolResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMRegisterToolResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMRegisterToolResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMRegisterToolResponse_Status

GPBEnumDescriptor *ITMRegisterToolResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000RequestMalformed\000PermissionDenied\000";
    static const int32_t values[] = {
        ITMRegisterToolResponse_Status_Ok,
        ITMRegisterToolResponse_Status_RequestMalformed,
        ITMRegisterToolResponse_Status_PermissionDenied,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMRegisterToolResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMRegisterToolResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMRegisterToolResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMRegisterToolResponse_Status_Ok:
    case ITMRegisterToolResponse_Status_RequestMalformed:
    case ITMRegisterToolResponse_Status_PermissionDenied:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMNotificationRequest

@implementation ITMNotificationRequest

@dynamic hasSession, session;
@dynamic hasSubscribe, subscribe;
@dynamic hasNotificationType, notificationType;

typedef struct ITMNotificationRequest__storage_ {
  uint32_t _has_storage_[1];
  ITMNotificationType notificationType;
  NSString *session;
} ITMNotificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "session",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMNotificationRequest_FieldNumber_Session,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ITMNotificationRequest__storage_, session),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "subscribe",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMNotificationRequest_FieldNumber_Subscribe,
        .core.hasIndex = 1,
        .core.offset = 2,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueEnum = ITMNotificationType_NotifyOnKeystroke,
        .core.name = "notificationType",
        .core.dataTypeSpecific.enumDescFunc = ITMNotificationType_EnumDescriptor,
        .core.number = ITMNotificationRequest_FieldNumber_NotificationType,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(ITMNotificationRequest__storage_, notificationType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMNotificationRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ITMNotificationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMNotificationResponse

@implementation ITMNotificationResponse

@dynamic hasStatus, status;

typedef struct ITMNotificationResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMNotificationResponse_Status status;
} ITMNotificationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ITMNotificationResponse_Status_EnumDescriptor,
        .number = ITMNotificationResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMNotificationResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMNotificationResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMNotificationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMNotificationResponse_Status

GPBEnumDescriptor *ITMNotificationResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000SessionNotFound\000RequestMalformed\000NotS"
        "ubscribed\000AlreadySubscribed\000";
    static const int32_t values[] = {
        ITMNotificationResponse_Status_Ok,
        ITMNotificationResponse_Status_SessionNotFound,
        ITMNotificationResponse_Status_RequestMalformed,
        ITMNotificationResponse_Status_NotSubscribed,
        ITMNotificationResponse_Status_AlreadySubscribed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMNotificationResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMNotificationResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMNotificationResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMNotificationResponse_Status_Ok:
    case ITMNotificationResponse_Status_SessionNotFound:
    case ITMNotificationResponse_Status_RequestMalformed:
    case ITMNotificationResponse_Status_NotSubscribed:
    case ITMNotificationResponse_Status_AlreadySubscribed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMNotification

@implementation ITMNotification

@dynamic hasKeystrokeNotification, keystrokeNotification;
@dynamic hasScreenUpdateNotification, screenUpdateNotification;
@dynamic hasPromptNotification, promptNotification;
@dynamic hasLocationChangeNotification, locationChangeNotification;

typedef struct ITMNotification__storage_ {
  uint32_t _has_storage_[1];
  ITMKeystrokeNotification *keystrokeNotification;
  ITMScreenUpdateNotification *screenUpdateNotification;
  ITMPromptNotification *promptNotification;
  ITMLocationChangeNotification *locationChangeNotification;
} ITMNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keystrokeNotification",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMKeystrokeNotification),
        .number = ITMNotification_FieldNumber_KeystrokeNotification,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMNotification__storage_, keystrokeNotification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "screenUpdateNotification",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMScreenUpdateNotification),
        .number = ITMNotification_FieldNumber_ScreenUpdateNotification,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMNotification__storage_, screenUpdateNotification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "promptNotification",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMPromptNotification),
        .number = ITMNotification_FieldNumber_PromptNotification,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMNotification__storage_, promptNotification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationChangeNotification",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMLocationChangeNotification),
        .number = ITMNotification_FieldNumber_LocationChangeNotification,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ITMNotification__storage_, locationChangeNotification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMNotification class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMNotification__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMKeystrokeNotification

@implementation ITMKeystrokeNotification

@dynamic hasCharacters, characters;
@dynamic hasCharactersIgnoringModifiers, charactersIgnoringModifiers;
@dynamic modifiersArray, modifiersArray_Count;
@dynamic hasKeyCode, keyCode;
@dynamic hasSession, session;

typedef struct ITMKeystrokeNotification__storage_ {
  uint32_t _has_storage_[1];
  int32_t keyCode;
  NSString *characters;
  NSString *charactersIgnoringModifiers;
  GPBEnumArray *modifiersArray;
  NSString *session;
} ITMKeystrokeNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "characters",
        .dataTypeSpecific.className = NULL,
        .number = ITMKeystrokeNotification_FieldNumber_Characters,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMKeystrokeNotification__storage_, characters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "charactersIgnoringModifiers",
        .dataTypeSpecific.className = NULL,
        .number = ITMKeystrokeNotification_FieldNumber_CharactersIgnoringModifiers,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMKeystrokeNotification__storage_, charactersIgnoringModifiers),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifiersArray",
        .dataTypeSpecific.enumDescFunc = ITMKeystrokeNotification_Modifiers_EnumDescriptor,
        .number = ITMKeystrokeNotification_FieldNumber_ModifiersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ITMKeystrokeNotification__storage_, modifiersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "keyCode",
        .dataTypeSpecific.className = NULL,
        .number = ITMKeystrokeNotification_FieldNumber_KeyCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMKeystrokeNotification__storage_, keyCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMKeystrokeNotification_FieldNumber_Session,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ITMKeystrokeNotification__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMKeystrokeNotification class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMKeystrokeNotification__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\033\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMKeystrokeNotification_Modifiers

GPBEnumDescriptor *ITMKeystrokeNotification_Modifiers_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Control\000Option\000Command\000Shift\000Function\000Nu"
        "mpad\000";
    static const int32_t values[] = {
        ITMKeystrokeNotification_Modifiers_Control,
        ITMKeystrokeNotification_Modifiers_Option,
        ITMKeystrokeNotification_Modifiers_Command,
        ITMKeystrokeNotification_Modifiers_Shift,
        ITMKeystrokeNotification_Modifiers_Function,
        ITMKeystrokeNotification_Modifiers_Numpad,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMKeystrokeNotification_Modifiers)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMKeystrokeNotification_Modifiers_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMKeystrokeNotification_Modifiers_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMKeystrokeNotification_Modifiers_Control:
    case ITMKeystrokeNotification_Modifiers_Option:
    case ITMKeystrokeNotification_Modifiers_Command:
    case ITMKeystrokeNotification_Modifiers_Shift:
    case ITMKeystrokeNotification_Modifiers_Function:
    case ITMKeystrokeNotification_Modifiers_Numpad:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMScreenUpdateNotification

@implementation ITMScreenUpdateNotification

@dynamic hasSession, session;

typedef struct ITMScreenUpdateNotification__storage_ {
  uint32_t _has_storage_[1];
  NSString *session;
} ITMScreenUpdateNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMScreenUpdateNotification_FieldNumber_Session,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMScreenUpdateNotification__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMScreenUpdateNotification class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMScreenUpdateNotification__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMPromptNotification

@implementation ITMPromptNotification

@dynamic hasSession, session;

typedef struct ITMPromptNotification__storage_ {
  uint32_t _has_storage_[1];
  NSString *session;
} ITMPromptNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMPromptNotification_FieldNumber_Session,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMPromptNotification__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMPromptNotification class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMPromptNotification__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMLocationChangeNotification

@implementation ITMLocationChangeNotification

@dynamic hasHostName, hostName;
@dynamic hasUserName, userName;
@dynamic hasDirectory, directory;
@dynamic hasSession, session;

typedef struct ITMLocationChangeNotification__storage_ {
  uint32_t _has_storage_[1];
  NSString *hostName;
  NSString *userName;
  NSString *directory;
  NSString *session;
} ITMLocationChangeNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hostName",
        .dataTypeSpecific.className = NULL,
        .number = ITMLocationChangeNotification_FieldNumber_HostName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMLocationChangeNotification__storage_, hostName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ITMLocationChangeNotification_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMLocationChangeNotification__storage_, userName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "directory",
        .dataTypeSpecific.className = NULL,
        .number = ITMLocationChangeNotification_FieldNumber_Directory,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMLocationChangeNotification__storage_, directory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMLocationChangeNotification_FieldNumber_Session,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ITMLocationChangeNotification__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMLocationChangeNotification class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMLocationChangeNotification__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMGetBufferRequest

@implementation ITMGetBufferRequest

@dynamic hasSession, session;
@dynamic hasLineRange, lineRange;

typedef struct ITMGetBufferRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *session;
  ITMLineRange *lineRange;
} ITMGetBufferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMGetBufferRequest_FieldNumber_Session,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMGetBufferRequest__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lineRange",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMLineRange),
        .number = ITMGetBufferRequest_FieldNumber_LineRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMGetBufferRequest__storage_, lineRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMGetBufferRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMGetBufferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMGetBufferResponse

@implementation ITMGetBufferResponse

@dynamic hasStatus, status;
@dynamic hasRange, range;
@dynamic contentsArray, contentsArray_Count;
@dynamic hasCursor, cursor;
@dynamic hasNumLinesAboveScreen, numLinesAboveScreen;

typedef struct ITMGetBufferResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMGetBufferResponse_Status status;
  ITMRange *range;
  NSMutableArray *contentsArray;
  ITMCoord *cursor;
  int64_t numLinesAboveScreen;
} ITMGetBufferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ITMGetBufferResponse_Status_EnumDescriptor,
        .number = ITMGetBufferResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMGetBufferResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "range",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMRange),
        .number = ITMGetBufferResponse_FieldNumber_Range,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMGetBufferResponse__storage_, range),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMLineContents),
        .number = ITMGetBufferResponse_FieldNumber_ContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ITMGetBufferResponse__storage_, contentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cursor",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCoord),
        .number = ITMGetBufferResponse_FieldNumber_Cursor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMGetBufferResponse__storage_, cursor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "numLinesAboveScreen",
        .dataTypeSpecific.className = NULL,
        .number = ITMGetBufferResponse_FieldNumber_NumLinesAboveScreen,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ITMGetBufferResponse__storage_, numLinesAboveScreen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMGetBufferResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMGetBufferResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMGetBufferResponse_Status

GPBEnumDescriptor *ITMGetBufferResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000SessionNotFound\000InvalidLineRange\000Requ"
        "estMalformed\000";
    static const int32_t values[] = {
        ITMGetBufferResponse_Status_Ok,
        ITMGetBufferResponse_Status_SessionNotFound,
        ITMGetBufferResponse_Status_InvalidLineRange,
        ITMGetBufferResponse_Status_RequestMalformed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMGetBufferResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMGetBufferResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMGetBufferResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMGetBufferResponse_Status_Ok:
    case ITMGetBufferResponse_Status_SessionNotFound:
    case ITMGetBufferResponse_Status_InvalidLineRange:
    case ITMGetBufferResponse_Status_RequestMalformed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMGetPromptRequest

@implementation ITMGetPromptRequest

@dynamic hasSession, session;

typedef struct ITMGetPromptRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *session;
} ITMGetPromptRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMGetPromptRequest_FieldNumber_Session,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMGetPromptRequest__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMGetPromptRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMGetPromptRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMGetPromptResponse

@implementation ITMGetPromptResponse

@dynamic hasStatus, status;
@dynamic hasPromptRange, promptRange;
@dynamic hasCommandRange, commandRange;
@dynamic hasOutputRange, outputRange;
@dynamic hasWorkingDirectory, workingDirectory;
@dynamic hasCommand, command;

typedef struct ITMGetPromptResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMGetPromptResponse_Status status;
  ITMCoordRange *promptRange;
  ITMCoordRange *commandRange;
  ITMCoordRange *outputRange;
  NSString *workingDirectory;
  NSString *command;
} ITMGetPromptResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ITMGetPromptResponse_Status_EnumDescriptor,
        .number = ITMGetPromptResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMGetPromptResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "promptRange",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCoordRange),
        .number = ITMGetPromptResponse_FieldNumber_PromptRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMGetPromptResponse__storage_, promptRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commandRange",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCoordRange),
        .number = ITMGetPromptResponse_FieldNumber_CommandRange,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMGetPromptResponse__storage_, commandRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputRange",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCoordRange),
        .number = ITMGetPromptResponse_FieldNumber_OutputRange,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ITMGetPromptResponse__storage_, outputRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workingDirectory",
        .dataTypeSpecific.className = NULL,
        .number = ITMGetPromptResponse_FieldNumber_WorkingDirectory,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ITMGetPromptResponse__storage_, workingDirectory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "command",
        .dataTypeSpecific.className = NULL,
        .number = ITMGetPromptResponse_FieldNumber_Command,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ITMGetPromptResponse__storage_, command),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMGetPromptResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMGetPromptResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMGetPromptResponse_Status

GPBEnumDescriptor *ITMGetPromptResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000SessionNotFound\000RequestMalformed\000Prom"
        "ptUnavailable\000";
    static const int32_t values[] = {
        ITMGetPromptResponse_Status_Ok,
        ITMGetPromptResponse_Status_SessionNotFound,
        ITMGetPromptResponse_Status_RequestMalformed,
        ITMGetPromptResponse_Status_PromptUnavailable,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMGetPromptResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMGetPromptResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMGetPromptResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMGetPromptResponse_Status_Ok:
    case ITMGetPromptResponse_Status_SessionNotFound:
    case ITMGetPromptResponse_Status_RequestMalformed:
    case ITMGetPromptResponse_Status_PromptUnavailable:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMSetProfilePropertyRequest

@implementation ITMSetProfilePropertyRequest

@dynamic hasSession, session;
@dynamic hasKey, key;
@dynamic hasJsonValue, jsonValue;

typedef struct ITMSetProfilePropertyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *session;
  NSString *key;
  NSString *jsonValue;
} ITMSetProfilePropertyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMSetProfilePropertyRequest_FieldNumber_Session,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMSetProfilePropertyRequest__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = ITMSetProfilePropertyRequest_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMSetProfilePropertyRequest__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jsonValue",
        .dataTypeSpecific.className = NULL,
        .number = ITMSetProfilePropertyRequest_FieldNumber_JsonValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMSetProfilePropertyRequest__storage_, jsonValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMSetProfilePropertyRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMSetProfilePropertyRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMSetProfilePropertyResponse

@implementation ITMSetProfilePropertyResponse

@dynamic hasStatus, status;

typedef struct ITMSetProfilePropertyResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMSetProfilePropertyResponse_Status status;
} ITMSetProfilePropertyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ITMSetProfilePropertyResponse_Status_EnumDescriptor,
        .number = ITMSetProfilePropertyResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMSetProfilePropertyResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMSetProfilePropertyResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMSetProfilePropertyResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMSetProfilePropertyResponse_Status

GPBEnumDescriptor *ITMSetProfilePropertyResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000SessionNotFound\000RequestMalformed\000";
    static const int32_t values[] = {
        ITMSetProfilePropertyResponse_Status_Ok,
        ITMSetProfilePropertyResponse_Status_SessionNotFound,
        ITMSetProfilePropertyResponse_Status_RequestMalformed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMSetProfilePropertyResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMSetProfilePropertyResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMSetProfilePropertyResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMSetProfilePropertyResponse_Status_Ok:
    case ITMSetProfilePropertyResponse_Status_SessionNotFound:
    case ITMSetProfilePropertyResponse_Status_RequestMalformed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMTransactionRequest

@implementation ITMTransactionRequest

@dynamic hasBegin, begin;

typedef struct ITMTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
} ITMTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "begin",
        .dataTypeSpecific.className = NULL,
        .number = ITMTransactionRequest_FieldNumber_Begin,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMTransactionRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMTransactionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMTransactionResponse

@implementation ITMTransactionResponse

@dynamic hasStatus, status;

typedef struct ITMTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMTransactionResponse_Status status;
} ITMTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ITMTransactionResponse_Status_EnumDescriptor,
        .number = ITMTransactionResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMTransactionResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMTransactionResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMTransactionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMTransactionResponse_Status

GPBEnumDescriptor *ITMTransactionResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000NoTransaction\000AlreadyInTransaction\000";
    static const int32_t values[] = {
        ITMTransactionResponse_Status_Ok,
        ITMTransactionResponse_Status_NoTransaction,
        ITMTransactionResponse_Status_AlreadyInTransaction,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMTransactionResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMTransactionResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMTransactionResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMTransactionResponse_Status_Ok:
    case ITMTransactionResponse_Status_NoTransaction:
    case ITMTransactionResponse_Status_AlreadyInTransaction:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMLineRange

@implementation ITMLineRange

@dynamic hasScreenContentsOnly, screenContentsOnly;
@dynamic hasTrailingLines, trailingLines;

typedef struct ITMLineRange__storage_ {
  uint32_t _has_storage_[1];
  int32_t trailingLines;
} ITMLineRange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "screenContentsOnly",
        .dataTypeSpecific.className = NULL,
        .number = ITMLineRange_FieldNumber_ScreenContentsOnly,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "trailingLines",
        .dataTypeSpecific.className = NULL,
        .number = ITMLineRange_FieldNumber_TrailingLines,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ITMLineRange__storage_, trailingLines),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMLineRange class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMLineRange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMRange

@implementation ITMRange

@dynamic hasLocation, location;
@dynamic hasLength, length;

typedef struct ITMRange__storage_ {
  uint32_t _has_storage_[1];
  int64_t location;
  int64_t length;
} ITMRange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = ITMRange_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMRange__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "length",
        .dataTypeSpecific.className = NULL,
        .number = ITMRange_FieldNumber_Length,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMRange__storage_, length),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMRange class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMRange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMCoordRange

@implementation ITMCoordRange

@dynamic hasStart, start;
@dynamic hasEnd, end;

typedef struct ITMCoordRange__storage_ {
  uint32_t _has_storage_[1];
  ITMCoord *start;
  ITMCoord *end;
} ITMCoordRange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCoord),
        .number = ITMCoordRange_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMCoordRange__storage_, start),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMCoord),
        .number = ITMCoordRange_FieldNumber_End,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMCoordRange__storage_, end),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMCoordRange class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMCoordRange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMCoord

@implementation ITMCoord

@dynamic hasX, x;
@dynamic hasY, y;

typedef struct ITMCoord__storage_ {
  uint32_t _has_storage_[1];
  int32_t x;
  int64_t y;
} ITMCoord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = ITMCoord_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMCoord__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = ITMCoord_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMCoord__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMCoord class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMCoord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMLineContents

@implementation ITMLineContents

@dynamic hasText, text;
@dynamic codePointsPerCellArray, codePointsPerCellArray_Count;
@dynamic hasContinuation, continuation;

typedef struct ITMLineContents__storage_ {
  uint32_t _has_storage_[1];
  ITMLineContents_Continuation continuation;
  NSString *text;
  NSMutableArray *codePointsPerCellArray;
} ITMLineContents__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "text",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMLineContents_FieldNumber_Text,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ITMLineContents__storage_, text),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "codePointsPerCellArray",
        .core.dataTypeSpecific.className = GPBStringifySymbol(ITMCodePointsPerCell),
        .core.number = ITMLineContents_FieldNumber_CodePointsPerCellArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(ITMLineContents__storage_, codePointsPerCellArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = ITMLineContents_Continuation_ContinuationHardEol,
        .core.name = "continuation",
        .core.dataTypeSpecific.enumDescFunc = ITMLineContents_Continuation_EnumDescriptor,
        .core.number = ITMLineContents_FieldNumber_Continuation,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(ITMLineContents__storage_, continuation),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMLineContents class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ITMLineContents__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMLineContents_Continuation

GPBEnumDescriptor *ITMLineContents_Continuation_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ContinuationHardEol\000ContinuationSoftEol\000";
    static const int32_t values[] = {
        ITMLineContents_Continuation_ContinuationHardEol,
        ITMLineContents_Continuation_ContinuationSoftEol,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMLineContents_Continuation)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMLineContents_Continuation_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMLineContents_Continuation_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMLineContents_Continuation_ContinuationHardEol:
    case ITMLineContents_Continuation_ContinuationSoftEol:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMCodePointsPerCell

@implementation ITMCodePointsPerCell

@dynamic hasNumCodePoints, numCodePoints;
@dynamic hasRepeats, repeats;

typedef struct ITMCodePointsPerCell__storage_ {
  uint32_t _has_storage_[1];
  int32_t numCodePoints;
  int32_t repeats;
} ITMCodePointsPerCell__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueInt32 = 1,
        .core.name = "numCodePoints",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMCodePointsPerCell_FieldNumber_NumCodePoints,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ITMCodePointsPerCell__storage_, numCodePoints),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueInt32 = 0,
        .core.name = "repeats",
        .core.dataTypeSpecific.className = NULL,
        .core.number = ITMCodePointsPerCell_FieldNumber_Repeats,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(ITMCodePointsPerCell__storage_, repeats),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMCodePointsPerCell class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ITMCodePointsPerCell__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMListSessionsRequest

@implementation ITMListSessionsRequest


typedef struct ITMListSessionsRequest__storage_ {
  uint32_t _has_storage_[1];
} ITMListSessionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMListSessionsRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ITMListSessionsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMSendTextRequest

@implementation ITMSendTextRequest

@dynamic hasSession, session;
@dynamic hasText, text;

typedef struct ITMSendTextRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *session;
  NSString *text;
} ITMSendTextRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "session",
        .dataTypeSpecific.className = NULL,
        .number = ITMSendTextRequest_FieldNumber_Session,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMSendTextRequest__storage_, session),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = ITMSendTextRequest_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ITMSendTextRequest__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMSendTextRequest class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMSendTextRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMSendTextResponse

@implementation ITMSendTextResponse

@dynamic hasStatus, status;

typedef struct ITMSendTextResponse__storage_ {
  uint32_t _has_storage_[1];
  ITMSendTextResponse_Status status;
} ITMSendTextResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ITMSendTextResponse_Status_EnumDescriptor,
        .number = ITMSendTextResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMSendTextResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMSendTextResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMSendTextResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ITMSendTextResponse_Status

GPBEnumDescriptor *ITMSendTextResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000SessionNotFound\000";
    static const int32_t values[] = {
        ITMSendTextResponse_Status_Ok,
        ITMSendTextResponse_Status_SessionNotFound,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ITMSendTextResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ITMSendTextResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ITMSendTextResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ITMSendTextResponse_Status_Ok:
    case ITMSendTextResponse_Status_SessionNotFound:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ITMListSessionsResponse

@implementation ITMListSessionsResponse

@dynamic windowsArray, windowsArray_Count;

typedef struct ITMListSessionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *windowsArray;
} ITMListSessionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "windowsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMListSessionsResponse_Window),
        .number = ITMListSessionsResponse_FieldNumber_WindowsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ITMListSessionsResponse__storage_, windowsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMListSessionsResponse class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMListSessionsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMListSessionsResponse_Window

@implementation ITMListSessionsResponse_Window

@dynamic tabsArray, tabsArray_Count;

typedef struct ITMListSessionsResponse_Window__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tabsArray;
} ITMListSessionsResponse_Window__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tabsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMListSessionsResponse_Tab),
        .number = ITMListSessionsResponse_Window_FieldNumber_TabsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ITMListSessionsResponse_Window__storage_, tabsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMListSessionsResponse_Window class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMListSessionsResponse_Window__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ITMListSessionsResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMListSessionsResponse_Tab

@implementation ITMListSessionsResponse_Tab

@dynamic sessionsArray, sessionsArray_Count;

typedef struct ITMListSessionsResponse_Tab__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sessionsArray;
} ITMListSessionsResponse_Tab__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ITMListSessionsResponse_Session),
        .number = ITMListSessionsResponse_Tab_FieldNumber_SessionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ITMListSessionsResponse_Tab__storage_, sessionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMListSessionsResponse_Tab class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMListSessionsResponse_Tab__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ITMListSessionsResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ITMListSessionsResponse_Session

@implementation ITMListSessionsResponse_Session

@dynamic hasUniqueIdentifier, uniqueIdentifier;

typedef struct ITMListSessionsResponse_Session__storage_ {
  uint32_t _has_storage_[1];
  NSString *uniqueIdentifier;
} ITMListSessionsResponse_Session__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uniqueIdentifier",
        .dataTypeSpecific.className = NULL,
        .number = ITMListSessionsResponse_Session_FieldNumber_UniqueIdentifier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ITMListSessionsResponse_Session__storage_, uniqueIdentifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ITMListSessionsResponse_Session class]
                                     rootClass:[ITMApiRoot class]
                                          file:ITMApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ITMListSessionsResponse_Session__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ITMListSessionsResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
